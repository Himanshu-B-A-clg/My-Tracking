// GitHub Gist Cloud Storage Configuration - TEMPLATE
// 
// ‚ö†Ô∏è DO NOT edit this file directly!
// 
// SETUP INSTRUCTIONS:
// 1. Copy this file and rename to: github-gist-config.js
// 2. Follow the setup guide in setup-guide.html
// 3. Replace the placeholder values in your copied file
// 4. The .gitignore will prevent your token from being committed

const GITHUB_CONFIG = {
    GITHUB_TOKEN: 'YOUR_GITHUB_TOKEN_HERE',  // Get from: https://github.com/settings/tokens/new
    GIST_ID: 'YOUR_GIST_ID_HERE',           // Get from: https://gist.github.com/
    USERNAME: 'YOUR_GITHUB_USERNAME'         // Your GitHub username
};

// Cloud sync settings
const SYNC_ENABLED = false; // Change to true after setup
const AUTO_SYNC_INTERVAL = 30000; // Auto sync every 30 seconds

// GitHub Gist API functions
class GistStorage {
    constructor(config) {
        this.token = config.GITHUB_TOKEN;
        this.gistId = config.GIST_ID;
        this.syncInterval = null;
    }

    async save(data) {
        if (!SYNC_ENABLED) return;
        
        try {
            const response = await fetch(`https://api.github.com/gists/${this.gistId}`, {
                method: 'PATCH',
                headers: {
                    'Authorization': `token ${this.token}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    files: {
                        'job-applications-data.json': {
                            content: JSON.stringify({
                                applications: data,
                                lastUpdated: new Date().toISOString()
                            }, null, 2)
                        }
                    }
                })
            });

            if (response.ok) {
                console.log('‚úÖ Data synced to cloud');
                return true;
            } else {
                console.error('‚ùå Sync failed:', response.status);
                return false;
            }
        } catch (error) {
            console.error('‚ùå Sync error:', error);
            return false;
        }
    }

    async load() {
        if (!SYNC_ENABLED) return null;
        
        try {
            const response = await fetch(`https://api.github.com/gists/${this.gistId}`, {
                headers: {
                    'Authorization': `token ${this.token}`,
                }
            });

            if (response.ok) {
                const gist = await response.json();
                const content = gist.files['job-applications-data.json'].content;
                const data = JSON.parse(content);
                console.log('‚úÖ Data loaded from cloud');
                return data.applications || [];
            } else {
                console.error('‚ùå Load failed:', response.status);
                return null;
            }
        } catch (error) {
            console.error('‚ùå Load error:', error);
            return null;
        }
    }

    startAutoSync(saveCallback) {
        if (!SYNC_ENABLED) return;
        
        this.syncInterval = setInterval(() => {
            saveCallback();
        }, AUTO_SYNC_INTERVAL);
        console.log('üîÑ Auto-sync enabled');
    }

    stopAutoSync() {
        if (this.syncInterval) {
            clearInterval(this.syncInterval);
            console.log('‚è∏Ô∏è Auto-sync disabled');
        }
    }
}

const gistStorage = new GistStorage(GITHUB_CONFIG);

if (typeof module !== 'undefined' && module.exports) {
    module.exports = { gistStorage, SYNC_ENABLED };
}
